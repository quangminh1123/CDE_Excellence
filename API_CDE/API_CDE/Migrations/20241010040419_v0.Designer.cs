// <auto-generated />
using System;
using API_CDE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API_CDE.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20241010040419_v0")]
    partial class v0
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API_CDE.Models.Account", b =>
                {
                    b.Property<int>("IdAcc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAcc"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("IdArea")
                        .HasColumnType("int");

                    b.Property<int?>("IdDis")
                        .HasColumnType("int");

                    b.Property<int?>("IdManager")
                        .HasColumnType("int");

                    b.Property<int?>("IdPosition")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdAcc");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdDis");

                    b.HasIndex("IdManager");

                    b.HasIndex("IdPosition");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("API_CDE.Models.AccountAnswer", b =>
                {
                    b.Property<int>("IdUsAn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsAn"), 1L, 1);

                    b.Property<int>("IdAcc")
                        .HasColumnType("int");

                    b.Property<int>("IdAnswer")
                        .HasColumnType("int");

                    b.Property<int>("IdQuestion")
                        .HasColumnType("int");

                    b.HasKey("IdUsAn");

                    b.HasIndex("IdAcc");

                    b.HasIndex("IdAnswer");

                    b.HasIndex("IdQuestion");

                    b.ToTable("AccountAnswers");
                });

            modelBuilder.Entity("API_CDE.Models.AccountNotification", b =>
                {
                    b.Property<int>("IdAcNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAcNo"), 1L, 1);

                    b.Property<int>("IdNoti")
                        .HasColumnType("int");

                    b.Property<int>("IdReceiver")
                        .HasColumnType("int");

                    b.HasKey("IdAcNo");

                    b.HasIndex("IdNoti");

                    b.HasIndex("IdReceiver");

                    b.ToTable("AccountNotifications");
                });

            modelBuilder.Entity("API_CDE.Models.AccountSurveyRequest", b =>
                {
                    b.Property<int>("IdAcSu")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAcSu"), 1L, 1);

                    b.Property<int>("IdAcc")
                        .HasColumnType("int");

                    b.Property<int>("IdSuRe")
                        .HasColumnType("int");

                    b.HasKey("IdAcSu");

                    b.HasIndex("IdAcc");

                    b.HasIndex("IdSuRe");

                    b.ToTable("AccountSurveyRequests");
                });

            modelBuilder.Entity("API_CDE.Models.Answer", b =>
                {
                    b.Property<int>("IdAnswer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAnswer"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdQuestion")
                        .HasColumnType("int");

                    b.HasKey("IdAnswer");

                    b.HasIndex("IdQuestion");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("API_CDE.Models.Area", b =>
                {
                    b.Property<int>("IdArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArea"), 1L, 1);

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("IdArea");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("API_CDE.Models.Article", b =>
                {
                    b.Property<int>("IdArticle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArticle"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int>("IdCreator")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathArticle")
                        .IsRequired()
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdArticle");

                    b.HasIndex("IdCreator");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("API_CDE.Models.ArticleImage", b =>
                {
                    b.Property<int>("IdArIm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdArIm"), 1L, 1);

                    b.Property<int>("IdCreator")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdArIm");

                    b.HasIndex("IdCreator");

                    b.ToTable("ArticleImages");
                });

            modelBuilder.Entity("API_CDE.Models.DateVisit", b =>
                {
                    b.Property<int>("IdDaVi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDaVi"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("IdViSc")
                        .HasColumnType("int");

                    b.HasKey("IdDaVi");

                    b.HasIndex("IdViSc");

                    b.ToTable("DateVisits");
                });

            modelBuilder.Entity("API_CDE.Models.Distributor", b =>
                {
                    b.Property<int>("IdDis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDis"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdArea")
                        .HasColumnType("int");

                    b.Property<int?>("IdManager")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdDis");

                    b.HasIndex("IdArea");

                    b.HasIndex("IdManager");

                    b.ToTable("Distributors");
                });

            modelBuilder.Entity("API_CDE.Models.Job", b =>
                {
                    b.Property<int>("IdJob")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdJob"), 1L, 1);

                    b.Property<string>("Describe")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("IdCreator")
                        .HasColumnType("int");

                    b.Property<int>("IdImplementer")
                        .HasColumnType("int");

                    b.Property<int>("IdViSc")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdJob");

                    b.HasIndex("IdCreator");

                    b.HasIndex("IdImplementer");

                    b.HasIndex("IdViSc");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("API_CDE.Models.JobImage", b =>
                {
                    b.Property<int>("IdJoIm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdJoIm"), 1L, 1);

                    b.Property<string>("Descibe")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdJob")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdJoIm");

                    b.HasIndex("IdJob");

                    b.ToTable("JobImages");
                });

            modelBuilder.Entity("API_CDE.Models.Notification", b =>
                {
                    b.Property<int>("IdNoti")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdNoti"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int>("IdCreator")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdNoti");

                    b.HasIndex("IdCreator");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("API_CDE.Models.Position", b =>
                {
                    b.Property<int>("IdPos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPos"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int>("IdPoGr")
                        .HasColumnType("int");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("IdPos");

                    b.HasIndex("IdPoGr");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("API_CDE.Models.PositionGroup", b =>
                {
                    b.Property<int>("IdPoGr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPoGr"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("IdPoGr");

                    b.ToTable("PositionGroups");
                });

            modelBuilder.Entity("API_CDE.Models.Question", b =>
                {
                    b.Property<int>("IdQuestion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdQuestion"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdSuAr")
                        .HasColumnType("int");

                    b.Property<bool>("IsMultipleChoice")
                        .HasColumnType("bit");

                    b.HasKey("IdQuestion");

                    b.HasIndex("IdSuAr");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("API_CDE.Models.SurveyArticle", b =>
                {
                    b.Property<int>("IdSuAr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSuAr"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int>("IdCreator")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdSuAr");

                    b.HasIndex("IdCreator");

                    b.ToTable("SurveyArticles");
                });

            modelBuilder.Entity("API_CDE.Models.SurveyRequest", b =>
                {
                    b.Property<int>("IdSuRe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSuRe"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("IdCreator")
                        .HasColumnType("int");

                    b.Property<int>("IdSuAr")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("IdSuRe");

                    b.HasIndex("IdCreator");

                    b.HasIndex("IdSuAr");

                    b.ToTable("SurveyRequests");
                });

            modelBuilder.Entity("API_CDE.Models.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("IdAcc")
                        .HasColumnType("int");

                    b.Property<int>("IdViSc")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdAcc");

                    b.HasIndex("IdViSc");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("API_CDE.Models.VisitSchedule", b =>
                {
                    b.Property<int>("IdViSc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdViSc"), 1L, 1);

                    b.Property<int>("IdCreator")
                        .HasColumnType("int");

                    b.Property<int?>("IdDistributor")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdViSc");

                    b.HasIndex("IdCreator");

                    b.HasIndex("IdDistributor");

                    b.ToTable("VisitSchedules");
                });

            modelBuilder.Entity("API_CDE.Models.Account", b =>
                {
                    b.HasOne("API_CDE.Models.Area", "Area")
                        .WithMany("accounts")
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("API_CDE.Models.Distributor", "Distributor")
                        .WithMany("accounts")
                        .HasForeignKey("IdDis")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("API_CDE.Models.Account", "AccManager")
                        .WithMany("managedAccounts")
                        .HasForeignKey("IdManager")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("API_CDE.Models.Position", "Position")
                        .WithMany("accounts")
                        .HasForeignKey("IdPosition")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AccManager");

                    b.Navigation("Area");

                    b.Navigation("Distributor");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("API_CDE.Models.AccountAnswer", b =>
                {
                    b.HasOne("API_CDE.Models.Account", "Account")
                        .WithMany("accountAnswers")
                        .HasForeignKey("IdAcc")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API_CDE.Models.Answer", "Answer")
                        .WithMany("accountAnswers")
                        .HasForeignKey("IdAnswer")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API_CDE.Models.Question", "Question")
                        .WithMany("accountAnswers")
                        .HasForeignKey("IdQuestion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("API_CDE.Models.AccountNotification", b =>
                {
                    b.HasOne("API_CDE.Models.Notification", "Notification")
                        .WithMany("accountNotifications")
                        .HasForeignKey("IdNoti")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API_CDE.Models.Account", "Account")
                        .WithMany("accountNotifications")
                        .HasForeignKey("IdReceiver")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("API_CDE.Models.AccountSurveyRequest", b =>
                {
                    b.HasOne("API_CDE.Models.Account", "Account")
                        .WithMany("accountSurveyRequests")
                        .HasForeignKey("IdAcc")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API_CDE.Models.SurveyRequest", "SurveyRequest")
                        .WithMany("accountSurveyRequests")
                        .HasForeignKey("IdSuRe")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("SurveyRequest");
                });

            modelBuilder.Entity("API_CDE.Models.Answer", b =>
                {
                    b.HasOne("API_CDE.Models.Question", "Question")
                        .WithMany("answers")
                        .HasForeignKey("IdQuestion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("API_CDE.Models.Article", b =>
                {
                    b.HasOne("API_CDE.Models.Account", "Account")
                        .WithMany("articles")
                        .HasForeignKey("IdCreator")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("API_CDE.Models.ArticleImage", b =>
                {
                    b.HasOne("API_CDE.Models.Account", "Account")
                        .WithMany("articleImages")
                        .HasForeignKey("IdCreator")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("API_CDE.Models.DateVisit", b =>
                {
                    b.HasOne("API_CDE.Models.VisitSchedule", "VisitSchedule")
                        .WithMany("dateVisits")
                        .HasForeignKey("IdViSc")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("VisitSchedule");
                });

            modelBuilder.Entity("API_CDE.Models.Distributor", b =>
                {
                    b.HasOne("API_CDE.Models.Area", "Area")
                        .WithMany("distributors")
                        .HasForeignKey("IdArea")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("API_CDE.Models.Account", "Account")
                        .WithMany("ManagedDistributors")
                        .HasForeignKey("IdManager")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("API_CDE.Models.Job", b =>
                {
                    b.HasOne("API_CDE.Models.Account", "Creator")
                        .WithMany("jobCreators")
                        .HasForeignKey("IdCreator")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API_CDE.Models.Account", "Implementer")
                        .WithMany("jobImplementers")
                        .HasForeignKey("IdImplementer")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API_CDE.Models.VisitSchedule", "VisitSchedule")
                        .WithMany("jobs")
                        .HasForeignKey("IdViSc")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Implementer");

                    b.Navigation("VisitSchedule");
                });

            modelBuilder.Entity("API_CDE.Models.JobImage", b =>
                {
                    b.HasOne("API_CDE.Models.Job", "Job")
                        .WithMany("JobImages")
                        .HasForeignKey("IdJob")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Job");
                });

            modelBuilder.Entity("API_CDE.Models.Notification", b =>
                {
                    b.HasOne("API_CDE.Models.Account", "Account")
                        .WithMany("notifications")
                        .HasForeignKey("IdCreator")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("API_CDE.Models.Position", b =>
                {
                    b.HasOne("API_CDE.Models.PositionGroup", "positionGroup")
                        .WithMany("positions")
                        .HasForeignKey("IdPoGr")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("positionGroup");
                });

            modelBuilder.Entity("API_CDE.Models.Question", b =>
                {
                    b.HasOne("API_CDE.Models.SurveyArticle", "SurveyArticle")
                        .WithMany("questions")
                        .HasForeignKey("IdSuAr")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SurveyArticle");
                });

            modelBuilder.Entity("API_CDE.Models.SurveyArticle", b =>
                {
                    b.HasOne("API_CDE.Models.Account", "Account")
                        .WithMany("surveyArticles")
                        .HasForeignKey("IdCreator")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("API_CDE.Models.SurveyRequest", b =>
                {
                    b.HasOne("API_CDE.Models.Account", "Account")
                        .WithMany("surveyRequests")
                        .HasForeignKey("IdCreator")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API_CDE.Models.SurveyArticle", "SurveyArticle")
                        .WithMany("surveyRequests")
                        .HasForeignKey("IdSuAr")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("SurveyArticle");
                });

            modelBuilder.Entity("API_CDE.Models.Visitor", b =>
                {
                    b.HasOne("API_CDE.Models.Account", "Account")
                        .WithMany("visitors")
                        .HasForeignKey("IdAcc")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API_CDE.Models.VisitSchedule", "VisitSchedule")
                        .WithMany("visitors")
                        .HasForeignKey("IdViSc")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("VisitSchedule");
                });

            modelBuilder.Entity("API_CDE.Models.VisitSchedule", b =>
                {
                    b.HasOne("API_CDE.Models.Account", "Account")
                        .WithMany("visitSchedules")
                        .HasForeignKey("IdCreator")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("API_CDE.Models.Distributor", "Distributor")
                        .WithMany("visitSchedules")
                        .HasForeignKey("IdDistributor")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Account");

                    b.Navigation("Distributor");
                });

            modelBuilder.Entity("API_CDE.Models.Account", b =>
                {
                    b.Navigation("ManagedDistributors");

                    b.Navigation("accountAnswers");

                    b.Navigation("accountNotifications");

                    b.Navigation("accountSurveyRequests");

                    b.Navigation("articleImages");

                    b.Navigation("articles");

                    b.Navigation("jobCreators");

                    b.Navigation("jobImplementers");

                    b.Navigation("managedAccounts");

                    b.Navigation("notifications");

                    b.Navigation("surveyArticles");

                    b.Navigation("surveyRequests");

                    b.Navigation("visitSchedules");

                    b.Navigation("visitors");
                });

            modelBuilder.Entity("API_CDE.Models.Answer", b =>
                {
                    b.Navigation("accountAnswers");
                });

            modelBuilder.Entity("API_CDE.Models.Area", b =>
                {
                    b.Navigation("accounts");

                    b.Navigation("distributors");
                });

            modelBuilder.Entity("API_CDE.Models.Distributor", b =>
                {
                    b.Navigation("accounts");

                    b.Navigation("visitSchedules");
                });

            modelBuilder.Entity("API_CDE.Models.Job", b =>
                {
                    b.Navigation("JobImages");
                });

            modelBuilder.Entity("API_CDE.Models.Notification", b =>
                {
                    b.Navigation("accountNotifications");
                });

            modelBuilder.Entity("API_CDE.Models.Position", b =>
                {
                    b.Navigation("accounts");
                });

            modelBuilder.Entity("API_CDE.Models.PositionGroup", b =>
                {
                    b.Navigation("positions");
                });

            modelBuilder.Entity("API_CDE.Models.Question", b =>
                {
                    b.Navigation("accountAnswers");

                    b.Navigation("answers");
                });

            modelBuilder.Entity("API_CDE.Models.SurveyArticle", b =>
                {
                    b.Navigation("questions");

                    b.Navigation("surveyRequests");
                });

            modelBuilder.Entity("API_CDE.Models.SurveyRequest", b =>
                {
                    b.Navigation("accountSurveyRequests");
                });

            modelBuilder.Entity("API_CDE.Models.VisitSchedule", b =>
                {
                    b.Navigation("dateVisits");

                    b.Navigation("jobs");

                    b.Navigation("visitors");
                });
#pragma warning restore 612, 618
        }
    }
}
